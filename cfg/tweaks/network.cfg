
sv_cheats 1 // Prevent fog cvar spew in console on startup

// =================
// '--- Network ---'
// =================
// ---------------
// '-- General --'
// ---------------
// Optimizes for better networking

net_queued_packet_thread 1 // Queue split packets
net_maxpacketdrop 1000 // Use faster packet drop threshold
//net_maxpacketdrop 5000 // Use default packet drop threshold
net_splitrate 2 // Split 2 packets per frame, reduces choke with a bit of CPU
                // usage
//net_splitrate 4 // Split 4 packets per frame, reduces choke but is more CPU
                  // intensive
//net_splitrate 1 // Do not split multiple packets for bad CPUs that cannot
                  // handle the extra load
cl_pred_optimize 2 // Reuse prediction data in case 1, as well as if the
                     // the server said our prediction data was within
                     // reasonable limits of its own data (case 2)
cl_lagcompensation 1 // Ensure lag compensation is turned on
cl_predictweapons 1 // Ensure weapon firing prediction is turned on
cl_smooth 1 // Smooth out prediction errors
//cl_smooth 0 // Skip view smoothing operation
cl_smoothtime 0.1 // Smooth out view for 100ms
hud_escort_interp 0.1 // Smooth out networked HUD updates over slightly less time

// -----------------
// '-- Snapshots --'
// -----------------
// Tuning client-server communication and interpolation

alias interp_congestion_unreliable "cl_interp 0.1"
alias interp_congestion_safe "cl_interp 0.0666666"
alias interp_congestion_balanced "cl_interp 0.0478260"
alias interp_congestion_lan "cl_interp 0.0333333"

alias interp_standard_unreliable "cl_interp 0.0454545"
alias interp_standard_safe "cl_interp 0.0303030"
alias interp_standard_balanced "cl_interp 0.0217391"
alias interp_standard_lan "cl_interp 0.015151"

//cl_cmdrate 66 // Send to server at this many times per second
//cl_updaterate 66 // Get from server at this many times per second

alias packet_rate_congestion_aliases "alias interp_unreliable interp_congestion_unreliable; alias interp_safe interp_congestion_safe; alias interp_balanced interp_congestion_balanced; alias interp_lan interp_congestion_lan"
alias packet_rate_standard_aliases "alias interp_unreliable interp_standard_unreliable; alias interp_safe interp_standard_safe; alias interp_balanced interp_standard_balanced; alias interp_lan interp_standard_lan"

alias packet_rate_congestion "cl_cmdrate 33; cl_updaterate 32;packet_rate_congestion_aliases;setinfo packet_rate congestion"
alias packet_rate_standard "cl_cmdrate 66; cl_updaterate 66;packet_rate_standard_aliases;setinfo packet_rate standard"

setinfo packet_rate_congestion ""
setinfo packet_rate_standard ""

alias packet_rate packet_rate_standard

//cl_interp 0.0217391;cl_interp_ratio 1.4347827 // Use an interp timing that
                                                // accounts for occasional
                                                // snapshot interval drops
//cl_interp 0.030303;cl_interp_ratio 2 // Interpolate over 2 snapshots to avoid
                                        // issues where one snapshot is dropped
                                        // once in a while. Safest option for
                                        // most users.
//cl_interp 0;cl_interp_ratio 1 // Reduce entity interpolation times to a
                                // minimum. Recommended only on LAN
//cl_interp 0.0454545;cl_interp_ratio 3 // Protect more against packet loss,
                                        // increase further for more protection.
                                        // For users with an unstable connection

alias snapshots_unreliable "interp_unreliable;cl_interp_ratio 3;setinfo snapshots unreliable"
alias snapshots_safe "interp_safe;cl_interp_ratio 2;setinfo snapshots safe"
alias snapshots_balanced "interp_balanced;cl_interp_ratio 1.4347827;setinfo snapshots balanced"
alias snapshots_lan "interp_lan;cl_interp_ratio 1;setinfo snapshots lan"

setinfo snapshots_unreliable ""
setinfo snapshots_safe ""
setinfo snapshots_balanced ""
setinfo snapshots_lan ""

alias snapshots snapshots_balanced

// -------------------
// '-- Packet Size --'
// -------------------
// How big packets are and how they are split up/compressed

//net_compresspackets 1 // Compress packets to reduce network latency on fast
                        // CPUs
//net_compresspackets 0 // Disable packet compression on slow CPUs or very fast
                        // networks (~100Mbps up or higher)
//net_compresspackets_minsize 957 // Compress packets above max reliable packet
                                  // size
//net_compresspackets_minsize 576 // Always compress packets to reduce network
                                  // usage. Compression further than this may
                                  // increase packet size
//net_maxroutable 1200;net_maxfragments 1200 // Balance between reliability and
                                             // avoiding split packets
//net_maxroutable 956;net_maxfragments 956 // Use a reliable packet size for
                                           // routers that have trouble with
                                           // larger sizes
//net_maxroutable 1260;net_maxfragments 1260 // Use max allowable packet size to
                                             // avoid split packets more in
                                             // order to save CPU time and
                                             // packet overhead

alias packet_size_conservative "net_compresspackets 1;net_compresspackets_minsize 957;net_maxroutable 956;net_maxfragments 956;setinfo packet_size conservative"
alias packet_size_lowend "net_compresspackets 1;net_compresspackets_minsize 1261;net_maxroutable 1260;net_maxfragments 1260;setinfo packet_size lowend"
alias packet_size_minimal "net_compresspackets 1;net_compresspackets_minsize 577;net_maxroutable 1260;net_maxfragments 1260;setinfo packet_size minimal"
alias packet_size_balanced "net_compresspackets 1;net_compresspackets_minsize 957;net_maxroutable 1200;net_maxfragments 1200;setinfo packet_size balanced"
alias packet_size_large "net_compresspackets 0;net_maxroutable 1260;net_maxfragments 1260;setinfo packet_size large"

setinfo packet_size_conservative ""
setinfo packet_size_lowend ""
setinfo packet_size_minimal ""
setinfo packet_size_balanced ""
setinfo packet_size_large ""

alias packet_size packet_size_balanced

// -------------------
// '-- Upload Rate --'
// -------------------
// Speed of packet sending, rate limited to prevent packet overflow
// Rate should be 60% of your stable upload speed in bytes per second

rate 196608 // 1.57 Mbps default rate from CS:GO
net_splitpacket_maxrate 78643
net_maxcleartime 0.0081889

// -------------
// '-- Files --'
// -------------
// Controls networked file handling

net_maxfilesize 64 // Max out file upload size for extra content
//cl_downloadfilter all // Allow all server custom files
//cl_downloadfilter nosounds // Do not download sound files a server
//cl_downloadfilter mapsonly // Only downloads maps from server custom files
//cl_downloadfilter none // Do not download any files from a server
tf_steam_workshop_query_timeout 5 // Shorter timeout for workshop

alias download_all "cl_downloadfilter all;setinfo download all"
alias download_nosounds "cl_downloadfilter nosounds;setinfo download nosounds"
alias download_mapsonly "cl_downloadfilter mapsonly;setinfo download mapsonly"
alias download_none "cl_downloadfilter none;setinfo download none"

setinfo download_all ""
setinfo download_nosounds ""
setinfo download_mapsonly ""
setinfo download_none ""

alias download download_all

// -------------------
// '-- Matchmaking --'
// -------------------
// Adjusts casual/competitive matchmaking settings

//tf_mm_custom_ping 100 // The ping tolerance for matchmaking
//tf_mm_custom_ping_enabled 1 // Enable custom ping tolerance
tf_mm_debug_level 0 // Remove matchmaking debug output
//tf_mm_partyclient_debug 1 // Enable party debug output
//tf_party_ignore_invites 1 // Ignore party invites
tf_party_join_request_mode 1 // Mode for party join requests:
                             // 0 - open join
                             // 1 - request join
                             // 2 - invite join
//tf_party_force_update // Force an update to the party system
//tf_party_keep_on_same_team 0 // Do not enforce parties being on the same team
//tf_datacenter_ping_debug 1 // Turn on debugging for server routing
//tf_datacenter_ping_dump // Dump server routing debug info
//tf_mm_dump_match_invites // Show current match invites

// ---------------------
// '-- Local Servers --'
// ---------------------
// Optimizes local server networking

cl_localnetworkbackdoor 1 // Network optimizations for local servers
net_usesocketsforloopback 0 // Skip using network sockets for local servers
sv_parallel_sendsnapshot 1 // Send snapshots to clients in parallel

// ===================
// '--- Rendering ---'
// ===================
// -----------------
// '-- Threading --'
// -----------------
// These settings will take advantage of CPU multi-threading

r_threaded_particles 1 // Process particle systems in parallel
mat_queue_mode 2 // Force multithreaded mode for the material system queue
//mat_queue_mode 1 // Force queued single threaded mode for CPUs with less than
                   // 4 threads
studio_queue_mode 1 // Use queue calls for studio renders
host_thread_mode 1 // Use the threaded frame behavior if applicable (use 2 to force)

// -----------------------------
// '-- Material System Queue --'
// -----------------------------
// These settings will take advantage of the material system, depending on how mat_queue_mode is set

r_queued_decals 0 // Disabled by default due to crashes
//r_queued_decals 1 // Offload decal draws to the material system
r_queued_post_processing 0 // Disabled by default because it usually fails to
                           // render the post processing effects in time for the
                           // frame render, resulting in a missing texture
//r_queued_post_processing 1 // Offloads post processing to the material system
                             // Performance improvement if your driver/GPU works
                             // with it
r_queued_ropes 1 // Queue some rope rendering using the material system
